// Code generated by protoc-gen-go. DO NOT EDIT.
// source: signedMessage.proto

package oip

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// Currently supported message types
type MessageTypes int32

const (
	// Invalid
	MessageTypes_InvalidMessage MessageTypes = 0
	// OIP 0.5 record message
	MessageTypes_OIP05 MessageTypes = 1
	// Historian record
	MessageTypes_Historian MessageTypes = 2
	// Multipart
	MessageTypes_Multipart MessageTypes = 3
)

var MessageTypes_name = map[int32]string{
	0: "InvalidMessage",
	1: "OIP05",
	2: "Historian",
	3: "Multipart",
}
var MessageTypes_value = map[string]int32{
	"InvalidMessage": 0,
	"OIP05":          1,
	"Historian":      2,
	"Multipart":      3,
}

func (x MessageTypes) String() string {
	return proto.EnumName(MessageTypes_name, int32(x))
}
func (MessageTypes) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

// Currently supported signature verification means
type SignatureTypes int32

const (
	// Invalid
	SignatureTypes_InvalidSignature SignatureTypes = 0
	// FLO address message signing
	SignatureTypes_Flo SignatureTypes = 1
	// Bitcoin address message signing
	// https://tools.bitcoin.com/verify-message/
	SignatureTypes_Btc SignatureTypes = 2
	// Raven address message signing - ToDo
	SignatureTypes_Rvn SignatureTypes = 3
	// Flo transaction is the signature - ToDo
	SignatureTypes_Tx SignatureTypes = 4
)

var SignatureTypes_name = map[int32]string{
	0: "InvalidSignature",
	1: "Flo",
	2: "Btc",
	3: "Rvn",
	4: "Tx",
}
var SignatureTypes_value = map[string]int32{
	"InvalidSignature": 0,
	"Flo":              1,
	"Btc":              2,
	"Rvn":              3,
	"Tx":               4,
}

func (x SignatureTypes) String() string {
	return proto.EnumName(SignatureTypes_name, int32(x))
}
func (SignatureTypes) EnumDescriptor() ([]byte, []int) { return fileDescriptor2, []int{1} }

type SignedMessage struct {
	// Raw Data that was signed by this message
	SerializedMessage []byte `protobuf:"bytes,1,opt,name=SerializedMessage,proto3" json:"SerializedMessage,omitempty"`
	// Specifies the type of contained data for further deserialization
	MessageType MessageTypes `protobuf:"varint,2,opt,name=MessageType,enum=oip.MessageTypes" json:"MessageType,omitempty"`
	// Identifies signature type for verification
	SignatureType SignatureTypes `protobuf:"varint,3,opt,name=SignatureType,enum=oip.SignatureTypes" json:"SignatureType,omitempty"`
	// Public Key used in the signing of original message
	PubKey []byte `protobuf:"bytes,4,opt,name=PubKey,proto3" json:"PubKey,omitempty"`
	// Signature of signed message
	Signature []byte `protobuf:"bytes,5,opt,name=Signature,proto3" json:"Signature,omitempty"`
}

func (m *SignedMessage) Reset()                    { *m = SignedMessage{} }
func (m *SignedMessage) String() string            { return proto.CompactTextString(m) }
func (*SignedMessage) ProtoMessage()               {}
func (*SignedMessage) Descriptor() ([]byte, []int) { return fileDescriptor2, []int{0} }

func (m *SignedMessage) GetSerializedMessage() []byte {
	if m != nil {
		return m.SerializedMessage
	}
	return nil
}

func (m *SignedMessage) GetMessageType() MessageTypes {
	if m != nil {
		return m.MessageType
	}
	return MessageTypes_InvalidMessage
}

func (m *SignedMessage) GetSignatureType() SignatureTypes {
	if m != nil {
		return m.SignatureType
	}
	return SignatureTypes_InvalidSignature
}

func (m *SignedMessage) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *SignedMessage) GetSignature() []byte {
	if m != nil {
		return m.Signature
	}
	return nil
}

func init() {
	proto.RegisterType((*SignedMessage)(nil), "oip.SignedMessage")
	proto.RegisterEnum("oip.MessageTypes", MessageTypes_name, MessageTypes_value)
	proto.RegisterEnum("oip.SignatureTypes", SignatureTypes_name, SignatureTypes_value)
}

func init() { proto.RegisterFile("signedMessage.proto", fileDescriptor2) }

var fileDescriptor2 = []byte{
	// 299 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x51, 0x4f, 0x6b, 0xfa, 0x40,
	0x10, 0x75, 0x13, 0xf5, 0x87, 0xf3, 0x53, 0x59, 0xc7, 0x52, 0x72, 0xe8, 0x41, 0x4a, 0x29, 0x22,
	0x25, 0x96, 0x4a, 0x0f, 0xa5, 0x37, 0x0f, 0xa5, 0x22, 0x52, 0x89, 0x9e, 0x7a, 0x5b, 0x75, 0x49,
	0x07, 0x62, 0x76, 0xc9, 0x6e, 0x6c, 0xed, 0xd7, 0xed, 0x17, 0x29, 0x89, 0xd6, 0x26, 0xf4, 0xb2,
	0xbc, 0x79, 0x7f, 0x76, 0xdf, 0x32, 0xd0, 0x35, 0x14, 0xc6, 0x72, 0x33, 0x93, 0xc6, 0x88, 0x50,
	0xfa, 0x3a, 0x51, 0x56, 0xa1, 0xab, 0x48, 0x5f, 0x7e, 0x31, 0x68, 0x2d, 0x8a, 0x22, 0xde, 0x40,
	0x67, 0x21, 0x13, 0x12, 0x11, 0x7d, 0x9e, 0x48, 0x8f, 0xf5, 0x58, 0xbf, 0x19, 0xfc, 0x15, 0x70,
	0x04, 0xff, 0x8f, 0x70, 0xb9, 0xd7, 0xd2, 0x73, 0x7a, 0xac, 0xdf, 0xbe, 0xeb, 0xf8, 0x8a, 0xb4,
	0x5f, 0xe0, 0x4d, 0x50, 0x74, 0xe1, 0xc3, 0xe1, 0x4d, 0x61, 0xd3, 0xe4, 0x10, 0x73, 0xf3, 0x58,
	0x37, 0x8f, 0x95, 0x14, 0x13, 0x94, 0x9d, 0x78, 0x0e, 0xf5, 0x79, 0xba, 0x9a, 0xca, 0xbd, 0x57,
	0xcd, 0x2b, 0x1d, 0x27, 0xbc, 0x80, 0xc6, 0xc9, 0xe8, 0xd5, 0x72, 0xe9, 0x97, 0x18, 0x4c, 0xa1,
	0x59, 0x6c, 0x83, 0x08, 0xed, 0x49, 0xbc, 0x13, 0x11, 0xfd, 0xfc, 0x83, 0x57, 0xb0, 0x01, 0xb5,
	0x97, 0xc9, 0xfc, 0xf6, 0x9e, 0x33, 0x6c, 0x41, 0xe3, 0x99, 0x8c, 0x55, 0x09, 0x89, 0x98, 0x3b,
	0xd9, 0x38, 0x4b, 0x23, 0x4b, 0x5a, 0x24, 0x96, 0xbb, 0x83, 0x09, 0xb4, 0xcb, 0x1d, 0xf1, 0x0c,
	0xf8, 0xf1, 0xba, 0x93, 0xc0, 0x2b, 0xf8, 0x0f, 0xdc, 0xa7, 0x48, 0x71, 0x96, 0x81, 0xb1, 0x5d,
	0x73, 0x27, 0x03, 0xc1, 0x2e, 0xe6, 0x2e, 0xd6, 0xc1, 0x59, 0x7e, 0xf0, 0xea, 0xf8, 0xfa, 0xf5,
	0x2a, 0x24, 0xfb, 0x96, 0xae, 0xfc, 0xb5, 0xda, 0x0e, 0x15, 0xe9, 0xf7, 0x30, 0x3b, 0x87, 0x5b,
	0xb5, 0x49, 0x23, 0x69, 0x32, 0xfc, 0xa8, 0x48, 0xaf, 0xea, 0xf9, 0xc6, 0x46, 0xdf, 0x01, 0x00,
	0x00, 0xff, 0xff, 0xb7, 0x41, 0x13, 0x2b, 0xc8, 0x01, 0x00, 0x00,
}
