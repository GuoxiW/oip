// Code generated by protoc-gen-go. DO NOT EDIT.
// source: historian.proto

/*
Package historian is a generated protocol buffer package.

It is generated from these files:
	historian.proto

It has these top-level messages:
	HistorianDataPoint
	HistorianPayout
*/
package historian

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type HistorianDataPoint struct {
	Version                  int32   `protobuf:"varint,1,opt,name=Version" json:"Version,omitempty"`
	PubKey                   []byte  `protobuf:"bytes,2,opt,name=PubKey,proto3" json:"PubKey,omitempty"`
	MiningRigRentalsLast10   float64 `protobuf:"fixed64,3,opt,name=MiningRigRentalsLast10" json:"MiningRigRentalsLast10,omitempty"`
	MiningRigRentalsLast24Hr float64 `protobuf:"fixed64,4,opt,name=MiningRigRentalsLast24Hr" json:"MiningRigRentalsLast24Hr,omitempty"`
	AutominerPoolHashrate    float64 `protobuf:"fixed64,5,opt,name=AutominerPoolHashrate" json:"AutominerPoolHashrate,omitempty"`
	FloNetHashRate           float64 `protobuf:"fixed64,6,opt,name=FloNetHashRate" json:"FloNetHashRate,omitempty"`
	FloMarketPriceBTC        float64 `protobuf:"fixed64,7,opt,name=FloMarketPriceBTC" json:"FloMarketPriceBTC,omitempty"`
	FloMarketPriceUSD        float64 `protobuf:"fixed64,8,opt,name=FloMarketPriceUSD" json:"FloMarketPriceUSD,omitempty"`
	LtcMarketPriceUSD        float64 `protobuf:"fixed64,9,opt,name=LtcMarketPriceUSD" json:"LtcMarketPriceUSD,omitempty"`
	NiceHashLast             float64 `protobuf:"fixed64,10,opt,name=NiceHashLast" json:"NiceHashLast,omitempty"`
	NiceHash24Hr             float64 `protobuf:"fixed64,11,opt,name=NiceHash24hr" json:"NiceHash24hr,omitempty"`
}

func (m *HistorianDataPoint) Reset()                    { *m = HistorianDataPoint{} }
func (m *HistorianDataPoint) String() string            { return proto.CompactTextString(m) }
func (*HistorianDataPoint) ProtoMessage()               {}
func (*HistorianDataPoint) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *HistorianDataPoint) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func (m *HistorianDataPoint) GetPubKey() []byte {
	if m != nil {
		return m.PubKey
	}
	return nil
}

func (m *HistorianDataPoint) GetMiningRigRentalsLast10() float64 {
	if m != nil {
		return m.MiningRigRentalsLast10
	}
	return 0
}

func (m *HistorianDataPoint) GetMiningRigRentalsLast24Hr() float64 {
	if m != nil {
		return m.MiningRigRentalsLast24Hr
	}
	return 0
}

func (m *HistorianDataPoint) GetAutominerPoolHashrate() float64 {
	if m != nil {
		return m.AutominerPoolHashrate
	}
	return 0
}

func (m *HistorianDataPoint) GetFloNetHashRate() float64 {
	if m != nil {
		return m.FloNetHashRate
	}
	return 0
}

func (m *HistorianDataPoint) GetFloMarketPriceBTC() float64 {
	if m != nil {
		return m.FloMarketPriceBTC
	}
	return 0
}

func (m *HistorianDataPoint) GetFloMarketPriceUSD() float64 {
	if m != nil {
		return m.FloMarketPriceUSD
	}
	return 0
}

func (m *HistorianDataPoint) GetLtcMarketPriceUSD() float64 {
	if m != nil {
		return m.LtcMarketPriceUSD
	}
	return 0
}

func (m *HistorianDataPoint) GetNiceHashLast() float64 {
	if m != nil {
		return m.NiceHashLast
	}
	return 0
}

func (m *HistorianDataPoint) GetNiceHash24Hr() float64 {
	if m != nil {
		return m.NiceHash24Hr
	}
	return 0
}

type HistorianPayout struct {
	Version int32 `protobuf:"varint,1,opt,name=Version" json:"Version,omitempty"`
}

func (m *HistorianPayout) Reset()                    { *m = HistorianPayout{} }
func (m *HistorianPayout) String() string            { return proto.CompactTextString(m) }
func (*HistorianPayout) ProtoMessage()               {}
func (*HistorianPayout) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *HistorianPayout) GetVersion() int32 {
	if m != nil {
		return m.Version
	}
	return 0
}

func init() {
	proto.RegisterType((*HistorianDataPoint)(nil), "oipProto.historian.HistorianDataPoint")
	proto.RegisterType((*HistorianPayout)(nil), "oipProto.historian.HistorianPayout")
}

func init() { proto.RegisterFile("historian.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 330 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x92, 0xd1, 0x4b, 0x3a, 0x41,
	0x10, 0xc7, 0xb9, 0x9f, 0x3f, 0xb5, 0x36, 0x49, 0x5a, 0x48, 0xf6, 0x51, 0x7c, 0x08, 0xa1, 0x50,
	0x33, 0xe9, 0xa1, 0x9e, 0x32, 0x11, 0x21, 0x95, 0xe3, 0xcc, 0x1e, 0x7a, 0x5b, 0xaf, 0xe5, 0x6e,
	0xe8, 0xdc, 0x91, 0xbd, 0x39, 0xc2, 0x7f, 0xb9, 0xbf, 0x22, 0xf6, 0xca, 0x23, 0xf5, 0xec, 0xe5,
	0x98, 0xf9, 0x7e, 0x3e, 0x03, 0xb7, 0xcc, 0xb0, 0x6a, 0x08, 0x31, 0xa1, 0x01, 0xa9, 0x5b, 0x2b,
	0x83, 0x84, 0x9c, 0x23, 0xac, 0x5c, 0x5b, 0xb5, 0x32, 0xd2, 0xf8, 0x2c, 0x30, 0x3e, 0xda, 0x74,
	0x03, 0x49, 0xd2, 0x45, 0xd0, 0xc4, 0x05, 0x2b, 0xbf, 0x28, 0x13, 0x03, 0x6a, 0xe1, 0xd4, 0x9d,
	0x66, 0xd1, 0xdb, 0xb4, 0xbc, 0xc6, 0x4a, 0x6e, 0xb2, 0x78, 0x52, 0x6b, 0xf1, 0xaf, 0xee, 0x34,
	0x2b, 0xde, 0x4f, 0xc7, 0x6f, 0x59, 0x6d, 0x02, 0x1a, 0x74, 0xe0, 0x41, 0xe0, 0x29, 0x4d, 0x32,
	0x8a, 0xc7, 0x32, 0xa6, 0xeb, 0x8e, 0x28, 0xd4, 0x9d, 0xa6, 0xe3, 0x1d, 0xa0, 0xfc, 0x8e, 0x89,
	0x3c, 0xd2, 0xed, 0x8d, 0x8c, 0xf8, 0x9f, 0x4e, 0x1e, 0xe4, 0xbc, 0xc7, 0xce, 0x1f, 0x12, 0xc2,
	0x25, 0x68, 0x65, 0x5c, 0xc4, 0x68, 0x24, 0xe3, 0xd0, 0x48, 0x52, 0xa2, 0x98, 0x0e, 0xe6, 0x43,
	0x7e, 0xc1, 0x4e, 0x87, 0x11, 0x4e, 0x15, 0xd9, 0xc4, 0xb3, 0x7a, 0x29, 0xd5, 0x77, 0x52, 0x7e,
	0xc5, 0xce, 0x86, 0x11, 0x4e, 0xa4, 0x79, 0x57, 0xe4, 0x1a, 0xf0, 0x55, 0xff, 0xf9, 0x51, 0x94,
	0x53, 0x75, 0x1f, 0xec, 0xdb, 0xf3, 0xd9, 0x40, 0x1c, 0xe5, 0xd9, 0xf3, 0xd9, 0xc0, 0xda, 0x63,
	0xf2, 0x77, 0xec, 0xe3, 0x6f, 0x7b, 0x0f, 0xf0, 0x06, 0xab, 0x4c, 0xc1, 0x57, 0xf6, 0xcf, 0xec,
	0xdb, 0x05, 0x4b, 0xc5, 0xad, 0xec, 0xb7, 0xd3, 0xed, 0x85, 0x46, 0x9c, 0x6c, 0x3b, 0x36, 0x6b,
	0x5c, 0xb2, 0x6a, 0xb6, 0x6b, 0x57, 0xae, 0x31, 0xf9, 0x63, 0xd1, 0xfd, 0xee, 0x6b, 0x27, 0x00,
	0x0a, 0x93, 0x45, 0xcb, 0xc7, 0x65, 0x1b, 0x61, 0xf5, 0x11, 0xd8, 0x6f, 0x7b, 0x89, 0x6f, 0x49,
	0xa4, 0xe2, 0x76, 0x76, 0x43, 0xf7, 0x59, 0xb5, 0x28, 0xa5, 0x87, 0x76, 0xf3, 0x15, 0x00, 0x00,
	0xff, 0xff, 0xb3, 0x39, 0x0d, 0x60, 0x7b, 0x02, 0x00, 0x00,
}
