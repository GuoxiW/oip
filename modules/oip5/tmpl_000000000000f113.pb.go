// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tmpl_000000000000f113.proto

package oip5

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Network int32

const (
	Network_UNKNOWN_NETWORK Network = 0
	// https://ipfs.io
	Network_IPFS Network = 1
	// https://webtorrent.io
	Network_WEB_TORRENT Network = 2
	// http(s)://
	Network_HTTP Network = 3
)

var Network_name = map[int32]string{
	0: "UNKNOWN_NETWORK",
	1: "IPFS",
	2: "WEB_TORRENT",
	3: "HTTP",
}
var Network_value = map[string]int32{
	"UNKNOWN_NETWORK": 0,
	"IPFS":            1,
	"WEB_TORRENT":     2,
	"HTTP":            3,
}

func (x Network) String() string {
	return proto.EnumName(Network_name, int32(x))
}
func (Network) EnumDescriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

type Tmpl_000000000000F113 struct {
	// Human readable file name
	DisplayName string `protobuf:"bytes,1,opt,name=displayName" json:"displayName,omitempty"`
	// Where to find file from storage.location
	FilePath string `protobuf:"bytes,2,opt,name=filePath" json:"filePath,omitempty"`
	// Byte size of file
	Size uint64 `protobuf:"varint,3,opt,name=size" json:"size,omitempty"`
	// MIME Type
	// https://developer.mozilla.org/en-US/docs/Web/HTTP/Basics_of_HTTP/MIME_types
	ContentType string `protobuf:"bytes,4,opt,name=contentType" json:"contentType,omitempty"`
	// Storage distribution network providing files
	Network Network `protobuf:"varint,5,opt,name=network,enum=oip5.record.templates.Network" json:"network,omitempty"`
	// Network specific identifier to locate files
	Location string `protobuf:"bytes,6,opt,name=location" json:"location,omitempty"`
}

func (m *Tmpl_000000000000F113) Reset()                    { *m = Tmpl_000000000000F113{} }
func (m *Tmpl_000000000000F113) String() string            { return proto.CompactTextString(m) }
func (*Tmpl_000000000000F113) ProtoMessage()               {}
func (*Tmpl_000000000000F113) Descriptor() ([]byte, []int) { return fileDescriptor5, []int{0} }

func (m *Tmpl_000000000000F113) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *Tmpl_000000000000F113) GetFilePath() string {
	if m != nil {
		return m.FilePath
	}
	return ""
}

func (m *Tmpl_000000000000F113) GetSize() uint64 {
	if m != nil {
		return m.Size
	}
	return 0
}

func (m *Tmpl_000000000000F113) GetContentType() string {
	if m != nil {
		return m.ContentType
	}
	return ""
}

func (m *Tmpl_000000000000F113) GetNetwork() Network {
	if m != nil {
		return m.Network
	}
	return Network_UNKNOWN_NETWORK
}

func (m *Tmpl_000000000000F113) GetLocation() string {
	if m != nil {
		return m.Location
	}
	return ""
}

func init() {
	proto.RegisterType((*Tmpl_000000000000F113)(nil), "oip5.record.templates.tmpl_000000000000F113")
	proto.RegisterEnum("oip5.record.templates.Network", Network_name, Network_value)
}

func init() { proto.RegisterFile("tmpl_000000000000f113.proto", fileDescriptor5) }

var fileDescriptor5 = []byte{
	// 271 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0x4d, 0x4b, 0xc3, 0x30,
	0x1c, 0xc6, 0xcd, 0x56, 0xbb, 0xf9, 0x1f, 0xb8, 0x12, 0x19, 0x04, 0x05, 0x29, 0x9e, 0x8a, 0x87,
	0x62, 0x2d, 0x82, 0xe7, 0x49, 0x87, 0x32, 0x48, 0x4b, 0x8c, 0x14, 0xbc, 0x94, 0xda, 0x65, 0x58,
	0x6c, 0x9b, 0xd0, 0x06, 0x64, 0x7e, 0x5b, 0xbf, 0x89, 0xb4, 0x75, 0x52, 0x70, 0x39, 0xe5, 0x79,
	0xc9, 0xc3, 0x8f, 0xc0, 0x85, 0x2e, 0x55, 0x91, 0xdc, 0x0c, 0xce, 0xd6, 0xf3, 0x7c, 0x57, 0xd5,
	0x52, 0x4b, 0xbc, 0x90, 0xb9, 0xba, 0x73, 0x6b, 0x91, 0xc9, 0x7a, 0xe3, 0x6a, 0x51, 0xaa, 0x22,
	0xd5, 0xa2, 0xb9, 0xfa, 0x46, 0xb0, 0xf8, 0xf7, 0x6c, 0xe5, 0x79, 0x3e, 0xb6, 0x61, 0xb6, 0xc9,
	0x1b, 0x55, 0xa4, 0x3b, 0x9a, 0x96, 0x82, 0x20, 0x1b, 0x39, 0x27, 0x6c, 0x68, 0xe1, 0x73, 0x98,
	0x6e, 0xf3, 0x42, 0x44, 0xa9, 0x7e, 0x27, 0xa3, 0x2e, 0xfe, 0xd3, 0x18, 0x83, 0xd1, 0xe4, 0x5f,
	0x82, 0x8c, 0x6d, 0xe4, 0x18, 0xac, 0xbb, 0xb7, 0x8b, 0x99, 0xac, 0xb4, 0xa8, 0x34, 0xdf, 0x29,
	0x41, 0x8c, 0x7e, 0x71, 0x60, 0xe1, 0x7b, 0x98, 0x54, 0x42, 0x7f, 0xca, 0xfa, 0x83, 0x1c, 0xdb,
	0xc8, 0x39, 0xbd, 0xbd, 0x74, 0x0f, 0x62, 0xbb, 0xb4, 0x6f, 0xb1, 0x7d, 0xbd, 0x65, 0x29, 0x64,
	0x96, 0xea, 0x5c, 0x56, 0xc4, 0xec, 0x59, 0xf6, 0xfa, 0xfa, 0x01, 0x26, 0xbf, 0x7d, 0x7c, 0x06,
	0xf3, 0x17, 0xba, 0xa6, 0x61, 0x4c, 0x13, 0x1a, 0xf0, 0x38, 0x64, 0x6b, 0xeb, 0x08, 0x4f, 0xc1,
	0x78, 0x8a, 0x56, 0xcf, 0x16, 0xc2, 0x73, 0x98, 0xc5, 0xc1, 0x32, 0xe1, 0x21, 0x63, 0x01, 0xe5,
	0xd6, 0xa8, 0x8d, 0x1e, 0x39, 0x8f, 0xac, 0xf1, 0xd2, 0x7c, 0x35, 0x5a, 0x94, 0x37, 0xb3, 0xfb,
	0x4e, 0xff, 0x27, 0x00, 0x00, 0xff, 0xff, 0x35, 0x4f, 0x6e, 0x06, 0x6d, 0x01, 0x00, 0x00,
}
